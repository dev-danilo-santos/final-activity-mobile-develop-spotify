{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useContext } from 'react';\nimport ThemeContext from \"../../context/context\";\nimport ThemeToogler from \"../../component/themeToogler/themeToogler\";\nimport AppTheme from \"../../component/themes/themes\";\nimport { getGeneros } from \"../../component/api/spotifyApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PreferenciasScreen = function PreferenciasScreen(_ref) {\n  _objectDestructuringEmpty(_ref);\n  var _useState = useState({\n      genres: []\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    fetchResult = _useState2[0],\n    setFetchResult = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedGenres = _useState4[0],\n    setSelectedGenres = _useState4[1];\n  function fetchPreferences() {\n    return _fetchPreferences.apply(this, arguments);\n  }\n  function _fetchPreferences() {\n    _fetchPreferences = _asyncToGenerator(function* () {\n      try {\n        var _yield$getGeneros = yield getGeneros(),\n          genres = _yield$getGeneros.data.genres;\n        setFetchResult(function () {\n          return {\n            genres: genres\n          };\n        });\n        console.log(genres);\n      } catch (error) {\n        setFetchResult({\n          genres: []\n        });\n        console.error(error);\n      }\n    });\n    return _fetchPreferences.apply(this, arguments);\n  }\n  useEffect(function () {\n    fetchPreferences();\n  }, []);\n  function handleGenreSelection(genre) {\n    if (selectedGenres.includes(genre)) {\n      setSelectedGenres(selectedGenres.filter(function (selectedGenre) {\n        return selectedGenre !== genre;\n      }));\n    } else {\n      if (selectedGenres.length < 5) {\n        setSelectedGenres([].concat(_toConsumableArray(selectedGenres), [genre]));\n      }\n    }\n  }\n  function isGenreSelected(genre) {\n    return selectedGenres.includes(genre);\n  }\n  return _jsxs(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: [_jsx(View, {\n      style: styles.headerContainer,\n      children: _jsx(Text, {\n        style: styles.header,\n        children: \"Prefer\\xEAncias\"\n      })\n    }), _jsx(View, {\n      style: styles.genresContainer,\n      children: fetchResult.genres.map(function (genre, index) {\n        return _jsx(TouchableOpacity, {\n          style: [styles.genreCard, isGenreSelected(genre) && styles.genreCardSelected],\n          onPress: function onPress() {\n            return handleGenreSelection(genre);\n          },\n          children: _jsx(Text, {\n            style: [styles.genreText, isGenreSelected(genre) && styles.genreTextSelected],\n            children: genre\n          })\n        }, index);\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.saveButton,\n      disabled: selectedGenres.length !== 5,\n      children: _jsx(Text, {\n        style: [styles.saveButtonText, selectedGenres.length !== 5 && styles.saveButtonTextDisabled],\n        children: \"Salvar\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    backgroundColor: AppTheme.background,\n    padding: 20\n  },\n  headerContainer: {\n    marginBottom: 20\n  },\n  header: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: AppTheme.text\n  },\n  genresContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  genreCard: {\n    backgroundColor: AppTheme.cardBackground,\n    borderRadius: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    margin: 5\n  },\n  genreCardSelected: {\n    backgroundColor: AppTheme.primary\n  },\n  genreText: {\n    color: AppTheme.text,\n    fontSize: 16\n  },\n  genreTextSelected: {\n    color: AppTheme.cardBackground\n  },\n  saveButton: {\n    backgroundColor: AppTheme.primary,\n    paddingVertical: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 20\n  },\n  saveButtonText: {\n    color: AppTheme.cardBackground,\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  saveButtonTextDisabled: {\n    opacity: 0.5\n  }\n});\nexport default PreferenciasScreen;","map":{"version":3,"names":["React","useEffect","useState","StyleSheet","View","Text","Image","TouchableOpacity","ScrollView","useContext","ThemeContext","ThemeToogler","AppTheme","getGeneros","jsx","_jsx","jsxs","_jsxs","PreferenciasScreen","_ref","_objectDestructuringEmpty","_useState","genres","_useState2","_slicedToArray","fetchResult","setFetchResult","_useState3","_useState4","selectedGenres","setSelectedGenres","fetchPreferences","_fetchPreferences","apply","arguments","_asyncToGenerator","_yield$getGeneros","data","console","log","error","handleGenreSelection","genre","includes","filter","selectedGenre","length","concat","_toConsumableArray","isGenreSelected","contentContainerStyle","styles","container","children","style","headerContainer","header","genresContainer","map","index","genreCard","genreCardSelected","onPress","genreText","genreTextSelected","saveButton","disabled","saveButtonText","saveButtonTextDisabled","create","flexGrow","backgroundColor","background","padding","marginBottom","fontSize","fontWeight","color","text","flexDirection","flexWrap","cardBackground","borderRadius","paddingHorizontal","paddingVertical","margin","primary","alignItems","marginTop","opacity"],"sources":["C:/Users/T-GAMER/Desktop/11-async-storage/src/screens/PreferenciasScreen/PreferenciasScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { StyleSheet, View, Text, Image, TouchableOpacity, ScrollView } from 'react-native'\r\nimport { useContext } from 'react'\r\nimport ThemeContext from '../../context/context'\r\nimport ThemeToogler from '../../component/themeToogler/themeToogler'\r\nimport AppTheme from '../../component/themes/themes'\r\nimport {getGeneros} from \"../../component/api/spotifyApi\"\r\n\r\nconst PreferenciasScreen = ({}) => {\r\n    const [fetchResult, setFetchResult] = useState({genres: [] })\r\n    const [selectedGenres, setSelectedGenres] = useState([])\r\n\r\n    async function fetchPreferences(){\r\n        try {\r\n            const {data: {genres } } = await getGeneros()\r\n            setFetchResult( () => ({genres}))\r\n            console.log(genres)\r\n        } catch (error) {\r\n            setFetchResult({genres: [] })\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchPreferences();\r\n    },[])\r\n\r\n    function handleGenreSelection(genre) {\r\n        if (selectedGenres.includes(genre)) {\r\n            setSelectedGenres(selectedGenres.filter(selectedGenre => selectedGenre !== genre))\r\n        } else {\r\n            if (selectedGenres.length < 5) {\r\n                setSelectedGenres([...selectedGenres, genre])\r\n            }\r\n        }\r\n    }\r\n\r\n    function isGenreSelected(genre) {\r\n        return selectedGenres.includes(genre)\r\n    }\r\n\r\n    return (\r\n        <ScrollView contentContainerStyle={styles.container}>\r\n            <View style={styles.headerContainer}>\r\n                <Text style={styles.header}>PreferÃªncias</Text>\r\n            </View>\r\n            <View style={styles.genresContainer}>\r\n                {fetchResult.genres.map((genre, index) => (\r\n                    <TouchableOpacity key={index} style={[styles.genreCard, isGenreSelected(genre) && styles.genreCardSelected]} onPress={() => handleGenreSelection(genre)}>\r\n                        <Text style={[styles.genreText, isGenreSelected(genre) && styles.genreTextSelected]}>{genre}</Text>\r\n                    </TouchableOpacity>\r\n                ))}\r\n            </View>\r\n            <TouchableOpacity style={styles.saveButton} disabled={selectedGenres.length !== 5}>\r\n                <Text style={[styles.saveButtonText, selectedGenres.length !== 5 && styles.saveButtonTextDisabled]}>Salvar</Text>\r\n            </TouchableOpacity>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexGrow: 1,\r\n        backgroundColor: AppTheme.background,\r\n        padding: 20\r\n    },\r\n    headerContainer: {\r\n        marginBottom: 20\r\n    },\r\n    header: {\r\n        fontSize: 32,\r\n        fontWeight: 'bold',\r\n        color: AppTheme.text\r\n    },\r\n    genresContainer: {\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap'\r\n    },\r\n    genreCard: {\r\n        backgroundColor: AppTheme.cardBackground,\r\n        borderRadius: 20,\r\n        paddingHorizontal: 20,\r\n        paddingVertical: 10,\r\n        margin: 5\r\n    },\r\n    genreCardSelected: {\r\n        backgroundColor: AppTheme.primary,\r\n    },\r\n    genreText: {\r\n        color: AppTheme.text,\r\n        fontSize: 16\r\n    },\r\n    genreTextSelected: {\r\n        color: AppTheme.cardBackground\r\n    },\r\n    saveButton: {\r\n        backgroundColor: AppTheme.primary,\r\n        paddingVertical: 15,\r\n        borderRadius: 10,\r\n        alignItems: 'center',\r\n        marginTop: 20\r\n    },\r\n    saveButtonText: {\r\n        color: AppTheme.cardBackground,\r\n        fontSize: 18,\r\n        fontWeight: 'bold'\r\n    },\r\n    saveButtonTextDisabled: {\r\n        opacity: 0.5\r\n    }\r\n})\r\n\r\nexport default PreferenciasScreen\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,UAAA;AAElD,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,YAAY;AACnB,OAAOC,YAAY;AACnB,OAAOC,QAAQ;AACf,SAAQC,UAAU;AAAuC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEzD,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,IAAA,EAAW;EAAAC,yBAAA,CAAAD,IAAA;EAC/B,IAAAE,SAAA,GAAsCnB,QAAQ,CAAC;MAACoB,MAAM,EAAE;IAAG,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAAtDI,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAAI,UAAA,GAA4CzB,QAAQ,CAAC,EAAE,CAAC;IAAA0B,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EAAgB,SAEzCG,gBAAgBA,CAAA;IAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,kBAAA;IAAAA,iBAAA,GAAAG,iBAAA,CAA/B,aAAiC;MAC7B,IAAI;QACA,IAAAC,iBAAA,SAAiCvB,UAAU,CAAC,CAAC;UAA/BS,MAAM,GAAAc,iBAAA,CAAbC,IAAI,CAAGf,MAAM;QACpBI,cAAc,CAAE;UAAA,OAAO;YAACJ,MAAM,EAANA;UAAM,CAAC;QAAA,CAAC,CAAC;QACjCgB,OAAO,CAACC,GAAG,CAACjB,MAAM,CAAC;MACvB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACZd,cAAc,CAAC;UAACJ,MAAM,EAAE;QAAG,CAAC,CAAC;QAC7BgB,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACxB;IACJ,CAAC;IAAA,OAAAR,iBAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAEDjC,SAAS,CAAC,YAAM;IACZ8B,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAC,EAAE,CAAC;EAEL,SAASU,oBAAoBA,CAACC,KAAK,EAAE;IACjC,IAAIb,cAAc,CAACc,QAAQ,CAACD,KAAK,CAAC,EAAE;MAChCZ,iBAAiB,CAACD,cAAc,CAACe,MAAM,CAAC,UAAAC,aAAa;QAAA,OAAIA,aAAa,KAAKH,KAAK;MAAA,EAAC,CAAC;IACtF,CAAC,MAAM;MACH,IAAIb,cAAc,CAACiB,MAAM,GAAG,CAAC,EAAE;QAC3BhB,iBAAiB,IAAAiB,MAAA,CAAAC,kBAAA,CAAKnB,cAAc,IAAEa,KAAK,EAAC,CAAC;MACjD;IACJ;EACJ;EAEA,SAASO,eAAeA,CAACP,KAAK,EAAE;IAC5B,OAAOb,cAAc,CAACc,QAAQ,CAACD,KAAK,CAAC;EACzC;EAEA,OACIzB,KAAA,CAACT,UAAU;IAAC0C,qBAAqB,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAChDtC,IAAA,CAACX,IAAI;MAACkD,KAAK,EAAEH,MAAM,CAACI,eAAgB;MAAAF,QAAA,EAChCtC,IAAA,CAACV,IAAI;QAACiD,KAAK,EAAEH,MAAM,CAACK,MAAO;QAAAH,QAAA,EAAC;MAAY,CAAM;IAAC,CAC7C,CAAC,EACPtC,IAAA,CAACX,IAAI;MAACkD,KAAK,EAAEH,MAAM,CAACM,eAAgB;MAAAJ,QAAA,EAC/B5B,WAAW,CAACH,MAAM,CAACoC,GAAG,CAAC,UAAChB,KAAK,EAAEiB,KAAK;QAAA,OACjC5C,IAAA,CAACR,gBAAgB;UAAa+C,KAAK,EAAE,CAACH,MAAM,CAACS,SAAS,EAAEX,eAAe,CAACP,KAAK,CAAC,IAAIS,MAAM,CAACU,iBAAiB,CAAE;UAACC,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMrB,oBAAoB,CAACC,KAAK,CAAC;UAAA,CAAC;UAAAW,QAAA,EACpJtC,IAAA,CAACV,IAAI;YAACiD,KAAK,EAAE,CAACH,MAAM,CAACY,SAAS,EAAEd,eAAe,CAACP,KAAK,CAAC,IAAIS,MAAM,CAACa,iBAAiB,CAAE;YAAAX,QAAA,EAAEX;UAAK,CAAO;QAAC,GADhFiB,KAEL,CAAC;MAAA,CACtB;IAAC,CACA,CAAC,EACP5C,IAAA,CAACR,gBAAgB;MAAC+C,KAAK,EAAEH,MAAM,CAACc,UAAW;MAACC,QAAQ,EAAErC,cAAc,CAACiB,MAAM,KAAK,CAAE;MAAAO,QAAA,EAC9EtC,IAAA,CAACV,IAAI;QAACiD,KAAK,EAAE,CAACH,MAAM,CAACgB,cAAc,EAAEtC,cAAc,CAACiB,MAAM,KAAK,CAAC,IAAIK,MAAM,CAACiB,sBAAsB,CAAE;QAAAf,QAAA,EAAC;MAAM,CAAM;IAAC,CACnG,CAAC;EAAA,CACX,CAAC;AAErB,CAAC;AAED,IAAMF,MAAM,GAAGhD,UAAU,CAACkE,MAAM,CAAC;EAC7BjB,SAAS,EAAE;IACPkB,QAAQ,EAAE,CAAC;IACXC,eAAe,EAAE3D,QAAQ,CAAC4D,UAAU;IACpCC,OAAO,EAAE;EACb,CAAC;EACDlB,eAAe,EAAE;IACbmB,YAAY,EAAE;EAClB,CAAC;EACDlB,MAAM,EAAE;IACJmB,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,KAAK,EAAEjE,QAAQ,CAACkE;EACpB,CAAC;EACDrB,eAAe,EAAE;IACbsB,aAAa,EAAE,KAAK;IACpBC,QAAQ,EAAE;EACd,CAAC;EACDpB,SAAS,EAAE;IACPW,eAAe,EAAE3D,QAAQ,CAACqE,cAAc;IACxCC,YAAY,EAAE,EAAE;IAChBC,iBAAiB,EAAE,EAAE;IACrBC,eAAe,EAAE,EAAE;IACnBC,MAAM,EAAE;EACZ,CAAC;EACDxB,iBAAiB,EAAE;IACfU,eAAe,EAAE3D,QAAQ,CAAC0E;EAC9B,CAAC;EACDvB,SAAS,EAAE;IACPc,KAAK,EAAEjE,QAAQ,CAACkE,IAAI;IACpBH,QAAQ,EAAE;EACd,CAAC;EACDX,iBAAiB,EAAE;IACfa,KAAK,EAAEjE,QAAQ,CAACqE;EACpB,CAAC;EACDhB,UAAU,EAAE;IACRM,eAAe,EAAE3D,QAAQ,CAAC0E,OAAO;IACjCF,eAAe,EAAE,EAAE;IACnBF,YAAY,EAAE,EAAE;IAChBK,UAAU,EAAE,QAAQ;IACpBC,SAAS,EAAE;EACf,CAAC;EACDrB,cAAc,EAAE;IACZU,KAAK,EAAEjE,QAAQ,CAACqE,cAAc;IAC9BN,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EAChB,CAAC;EACDR,sBAAsB,EAAE;IACpBqB,OAAO,EAAE;EACb;AACJ,CAAC,CAAC;AAEF,eAAevE,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}