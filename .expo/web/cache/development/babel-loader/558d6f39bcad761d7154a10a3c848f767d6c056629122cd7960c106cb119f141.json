{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useContext } from 'react';\nimport ThemeContext from \"../../context/context\";\nimport ThemeToogler from \"../../component/themeToogler/themeToogler\";\nimport AppTheme from \"../../component/themes/themes\";\nimport { getGeneros } from \"../../component/api/spotifyApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar getRandomColor = function getRandomColor() {\n  var hue = Math.floor(Math.random() * 360);\n  var saturation = Math.floor(Math.random() * 30) + 60;\n  var lightness = Math.floor(Math.random() * 20) + 40;\n  return \"hsl(\" + hue + \", \" + saturation + \"%, \" + lightness + \"%)\";\n};\nvar PreferenciasScreen = function PreferenciasScreen() {\n  var _useState = useState({\n      genres: []\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    fetchResult = _useState2[0],\n    setFetchResult = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedGenres = _useState4[0],\n    setSelectedGenres = _useState4[1];\n  function fetchPreferences() {\n    return _fetchPreferences.apply(this, arguments);\n  }\n  function _fetchPreferences() {\n    _fetchPreferences = _asyncToGenerator(function* () {\n      try {\n        var _yield$getGeneros = yield getGeneros(),\n          genres = _yield$getGeneros.data.genres;\n        setFetchResult({\n          genres: genres\n        });\n        console.log(genres);\n      } catch (error) {\n        setFetchResult({\n          genres: []\n        });\n        console.error(error);\n      }\n    });\n    return _fetchPreferences.apply(this, arguments);\n  }\n  useEffect(function () {\n    fetchPreferences();\n  }, []);\n  function handleGenreSelect(genre) {\n    if (selectedGenres.includes(genre)) {\n      setSelectedGenres(selectedGenres.filter(function (selectedGenre) {\n        return selectedGenre !== genre;\n      }));\n    } else if (selectedGenres.length < 5) {\n      setSelectedGenres([].concat(_toConsumableArray(selectedGenres), [genre]));\n    }\n  }\n  return _jsx(View, {\n    style: styles.container,\n    children: fetchResult.genres.map(function (genre) {\n      return _jsx(TouchableOpacity, {\n        style: [styles.genreCard, selectedGenres.includes(genre) && styles.selectedGenreCard, {\n          backgroundColor: getRandomColor()\n        }],\n        onPress: function onPress() {\n          return handleGenreSelect(genre);\n        },\n        activeOpacity: 0.7,\n        children: _jsx(Text, {\n          style: [styles.genreText, selectedGenres.includes(genre) && styles.selectedGenreText],\n          children: genre\n        })\n      }, genre);\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 16\n  },\n  genreCard: {\n    borderRadius: 8,\n    padding: 8,\n    margin: 8\n  },\n  selectedGenreCard: {\n    backgroundColor: '#1DB954'\n  },\n  genreText: {\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  selectedGenreText: {\n    color: '#FFFFFF'\n  }\n});\nexport default PreferenciasScreen;","map":{"version":3,"names":["React","useEffect","useState","StyleSheet","View","Text","Image","TouchableOpacity","useContext","ThemeContext","ThemeToogler","AppTheme","getGeneros","jsx","_jsx","getRandomColor","hue","Math","floor","random","saturation","lightness","PreferenciasScreen","_useState","genres","_useState2","_slicedToArray","fetchResult","setFetchResult","_useState3","_useState4","selectedGenres","setSelectedGenres","fetchPreferences","_fetchPreferences","apply","arguments","_asyncToGenerator","_yield$getGeneros","data","console","log","error","handleGenreSelect","genre","includes","filter","selectedGenre","length","concat","_toConsumableArray","style","styles","container","children","map","genreCard","selectedGenreCard","backgroundColor","onPress","activeOpacity","genreText","selectedGenreText","create","flex","flexDirection","flexWrap","alignItems","justifyContent","margin","borderRadius","padding","fontSize","fontWeight","color"],"sources":["C:/Users/T-GAMER/Desktop/11-async-storage/src/screens/PreferenciasScreen/PreferenciasScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { StyleSheet, View, Text, Image, TouchableOpacity } from 'react-native'\r\nimport { useContext } from 'react'\r\nimport ThemeContext from '../../context/context'\r\nimport ThemeToogler from '../../component/themeToogler/themeToogler'\r\nimport AppTheme from '../../component/themes/themes'\r\nimport { getGeneros } from \"../../component/api/spotifyApi\"\r\n\r\nconst getRandomColor = () => {\r\n  const hue = Math.floor(Math.random() * 360);\r\n  const saturation = Math.floor(Math.random() * 30) + 60; // muda a saturação para estar entre 60 e 90\r\n  const lightness = Math.floor(Math.random() * 20) + 40; // muda a luminosidade para estar entre 40 e 60\r\n  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n}\r\n\r\nconst PreferenciasScreen = () => {\r\n    const [fetchResult, setFetchResult] = useState({ genres: [] })\r\n    const [selectedGenres, setSelectedGenres] = useState([])\r\n\r\n    async function fetchPreferences() {\r\n        try {\r\n            const { data: { genres } } = await getGeneros();\r\n            setFetchResult({ genres });\r\n            console.log(genres);\r\n        } catch (error) {\r\n            setFetchResult({ genres: [] })\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchPreferences();\r\n    }, [])\r\n\r\n    function handleGenreSelect(genre) {\r\n        if (selectedGenres.includes(genre)) {\r\n            setSelectedGenres(selectedGenres.filter(selectedGenre => selectedGenre !== genre));\r\n        } else if (selectedGenres.length < 5) {\r\n            setSelectedGenres([...selectedGenres, genre]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            {fetchResult.genres.map(genre => (\r\n                <TouchableOpacity\r\n                    key={genre}\r\n                    style={[styles.genreCard, selectedGenres.includes(genre) && styles.selectedGenreCard, { backgroundColor: getRandomColor() }]}\r\n                    onPress={() => handleGenreSelect(genre)}\r\n                    activeOpacity={0.7}\r\n                >\r\n                    <Text style={[styles.genreText, selectedGenres.includes(genre) && styles.selectedGenreText]}>{genre}</Text>\r\n                </TouchableOpacity>\r\n            ))}\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        margin: 16,\r\n    },\r\n    genreCard: {\r\n        borderRadius: 8,\r\n        padding: 8,\r\n        margin: 8,\r\n    },\r\n    selectedGenreCard: {\r\n        backgroundColor: '#1DB954',\r\n    },\r\n    genreText: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n    },\r\n    selectedGenreText: {\r\n        color: '#FFFFFF',\r\n    },\r\n})\r\n\r\nexport default PreferenciasScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}