{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getGeneros } from \"../../component/api/spotifyApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PreferenciasScreen = function PreferenciasScreen() {\n  var _useState = useState({\n      genres: []\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    fetchResult = _useState2[0],\n    setFetchResult = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedGenres = _useState4[0],\n    setSelectedGenres = _useState4[1];\n  useEffect(function () {\n    fetchPreferences();\n  }, []);\n  function fetchPreferences() {\n    return _fetchPreferences.apply(this, arguments);\n  }\n  function _fetchPreferences() {\n    _fetchPreferences = _asyncToGenerator(function* () {\n      try {\n        var _yield$getGeneros = yield getGeneros(),\n          genres = _yield$getGeneros.data.genres;\n        setFetchResult({\n          genres: genres\n        });\n        console.log(genres);\n      } catch (error) {\n        setFetchResult({\n          genres: []\n        });\n        console.error(error);\n      }\n    });\n    return _fetchPreferences.apply(this, arguments);\n  }\n  function handleGenreSelect(genre) {\n    if (selectedGenres.includes(genre)) {\n      setSelectedGenres(selectedGenres.filter(function (selectedGenre) {\n        return selectedGenre !== genre;\n      }));\n    } else if (selectedGenres.length < 5) {\n      setSelectedGenres([].concat(_toConsumableArray(selectedGenres), [genre]));\n    }\n  }\n  function handleSavePreferences() {\n    return _handleSavePreferences.apply(this, arguments);\n  }\n  function _handleSavePreferences() {\n    _handleSavePreferences = _asyncToGenerator(function* () {\n      if (selectedGenres.length === 0) {\n        Alert.alert('Erro', 'Selecione pelo menos um gênero.');\n        return;\n      }\n      try {\n        yield AsyncStorage.setItem('selectedGenres', JSON.stringify(selectedGenres));\n        Alert.alert('Sucesso', 'Preferências salvas com sucesso!');\n      } catch (error) {\n        console.error(error);\n        Alert.alert('Erro', 'Ocorreu um erro ao salvar as preferências.');\n      }\n    });\n    return _handleSavePreferences.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [fetchResult.genres.map(function (genre) {\n      return _jsx(TouchableOpacity, {\n        style: [styles.genreCard, selectedGenres.includes(genre) && styles.selectedGenreCard],\n        onPress: function onPress() {\n          return handleGenreSelect(genre);\n        },\n        activeOpacity: 0.7,\n        children: _jsx(Text, {\n          style: [styles.genreText, selectedGenres.includes(genre) && styles.selectedGenreText],\n          children: genre\n        })\n      }, genre);\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleSavePreferences,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Pronto\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 16\n  },\n  genreCard: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    padding: 8,\n    margin: 8\n  },\n  selectedGenreCard: {\n    backgroundColor: '#1DB954'\n  },\n  genreText: {\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  selectedGenreText: {\n    color: '#FFFFFF'\n  },\n  button: {\n    position: 'absolute',\n    bottom: 32,\n    right: 32,\n    backgroundColor: '#1DB954',\n    borderRadius: 50,\n    paddingVertical: 12,\n    paddingHorizontal: 24\n  },\n  buttonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default PreferenciasScreen;","map":{"version":3,"names":["React","useEffect","useState","StyleSheet","View","Text","Image","TouchableOpacity","Alert","AsyncStorage","getGeneros","jsx","_jsx","jsxs","_jsxs","PreferenciasScreen","_useState","genres","_useState2","_slicedToArray","fetchResult","setFetchResult","_useState3","_useState4","selectedGenres","setSelectedGenres","fetchPreferences","_fetchPreferences","apply","arguments","_asyncToGenerator","_yield$getGeneros","data","console","log","error","handleGenreSelect","genre","includes","filter","selectedGenre","length","concat","_toConsumableArray","handleSavePreferences","_handleSavePreferences","alert","setItem","JSON","stringify","style","styles","container","children","map","genreCard","selectedGenreCard","onPress","activeOpacity","genreText","selectedGenreText","button","buttonText","create","flex","flexDirection","flexWrap","alignItems","justifyContent","margin","backgroundColor","borderRadius","padding","fontSize","fontWeight","color","position","bottom","right","paddingVertical","paddingHorizontal"],"sources":["C:/Users/T-GAMER/Desktop/11-async-storage/src/screens/PreferenciasScreen/PreferenciasScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StyleSheet, View, Text, Image, TouchableOpacity, Alert } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getGeneros } from '../../component/api/spotifyApi';\r\n\r\nconst PreferenciasScreen = () => {\r\n  const [fetchResult, setFetchResult] = useState({ genres: [] });\r\n  const [selectedGenres, setSelectedGenres] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchPreferences();\r\n  }, []);\r\n\r\n  async function fetchPreferences() {\r\n    try {\r\n      const { data: { genres } } = await getGeneros();\r\n      setFetchResult({ genres });\r\n      console.log(genres);\r\n    } catch (error) {\r\n      setFetchResult({ genres: [] });\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  function handleGenreSelect(genre) {\r\n    if (selectedGenres.includes(genre)) {\r\n      setSelectedGenres(selectedGenres.filter((selectedGenre) => selectedGenre !== genre));\r\n    } else if (selectedGenres.length < 5) {\r\n      setSelectedGenres([...selectedGenres, genre]);\r\n    }\r\n  }\r\n\r\n  async function handleSavePreferences() {\r\n    if (selectedGenres.length === 0) {\r\n      Alert.alert('Erro', 'Selecione pelo menos um gênero.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await AsyncStorage.setItem('selectedGenres', JSON.stringify(selectedGenres));\r\n      Alert.alert('Sucesso', 'Preferências salvas com sucesso!');\r\n    } catch (error) {\r\n      console.error(error);\r\n      Alert.alert('Erro', 'Ocorreu um erro ao salvar as preferências.');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {fetchResult.genres.map((genre) => (\r\n        <TouchableOpacity\r\n          key={genre}\r\n          style={[styles.genreCard, selectedGenres.includes(genre) && styles.selectedGenreCard]}\r\n          onPress={() => handleGenreSelect(genre)}\r\n          activeOpacity={0.7}\r\n        >\r\n          <Text style={[styles.genreText, selectedGenres.includes(genre) && styles.selectedGenreText]}>{genre}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n      <TouchableOpacity style={styles.button} onPress={handleSavePreferences}>\r\n        <Text style={styles.buttonText}>Pronto</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    margin: 16,\r\n  },\r\n  genreCard: {\r\n    backgroundColor: '#FFFFFF',\r\n    borderRadius: 8,\r\n    padding: 8,\r\n    margin: 8,\r\n  },\r\n  selectedGenreCard: {\r\n    backgroundColor: '#1DB954',\r\n  },\r\n  genreText: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  selectedGenreText: {\r\n    color: '#FFFFFF',\r\n  },\r\n  button: {\r\n    position: 'absolute',\r\n    bottom: 32,\r\n    right: 32,\r\n    backgroundColor: '#1DB954',\r\n    borderRadius: 50,\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 24,\r\n  },\r\n  buttonText: {\r\n    color: '#FFFFFF',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default PreferenciasScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}