{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getGeneros } from \"../../component/api/spotifyApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PreferenciasScreen = function PreferenciasScreen() {\n  var _useState = useState({\n      genres: []\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    fetchResult = _useState2[0],\n    setFetchResult = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedGenres = _useState4[0],\n    setSelectedGenres = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    scrollOffset = _useState6[0],\n    setScrollOffset = _useState6[1];\n  useEffect(function () {\n    fetchPreferences();\n  }, []);\n  function fetchPreferences() {\n    return _fetchPreferences.apply(this, arguments);\n  }\n  function _fetchPreferences() {\n    _fetchPreferences = _asyncToGenerator(function* () {\n      try {\n        var _yield$getGeneros = yield getGeneros(),\n          genres = _yield$getGeneros.data.genres;\n        setFetchResult({\n          genres: genres\n        });\n        console.log(genres);\n      } catch (error) {\n        setFetchResult({\n          genres: []\n        });\n        console.error(error);\n      }\n    });\n    return _fetchPreferences.apply(this, arguments);\n  }\n  function handleGenreSelect(genre) {\n    if (selectedGenres.includes(genre)) {\n      setSelectedGenres(selectedGenres.filter(function (selectedGenre) {\n        return selectedGenre !== genre;\n      }));\n    } else if (selectedGenres.length < 5) {\n      setSelectedGenres([].concat(_toConsumableArray(selectedGenres), [genre]));\n    }\n  }\n  function handleSavePreferences() {\n    return _handleSavePreferences.apply(this, arguments);\n  }\n  function _handleSavePreferences() {\n    _handleSavePreferences = _asyncToGenerator(function* () {\n      if (selectedGenres.length === 0) {\n        Alert.alert('Erro', 'Selecione pelo menos um gênero.');\n        return;\n      }\n      try {\n        yield AsyncStorage.setItem('selectedGenres', JSON.stringify(selectedGenres));\n        Alert.alert('Sucesso', 'Preferências salvas com sucesso!');\n      } catch (error) {\n        console.error(error);\n        Alert.alert('Erro', 'Ocorreu um erro ao salvar as preferências.');\n      }\n    });\n    return _handleSavePreferences.apply(this, arguments);\n  }\n  var handleScroll = function handleScroll(event) {\n    var offsetY = event.nativeEvent.contentOffset.y;\n    setScrollOffset(offsetY);\n  };\n  var renderFloatingButton = function renderFloatingButton() {\n    if (selectedGenres.length === 0) {\n      return null;\n    }\n    return _jsx(TouchableOpacity, {\n      style: [styles.button, {\n        top: scrollOffset + 500\n      }],\n      onPress: handleSavePreferences,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Pronto\"\n      })\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [fetchResult.genres.map(function (genre) {\n      return _jsx(TouchableOpacity, {\n        style: [styles.genreCard, selectedGenres.includes(genre) && styles.selectedGenreCard],\n        onPress: function onPress() {\n          return handleGenreSelect(genre);\n        },\n        activeOpacity: 0.7,\n        children: _jsx(Text, {\n          style: [styles.genreText, selectedGenres.includes(genre) && styles.selectedGenreText],\n          children: genre\n        })\n      }, genre);\n    }), renderFloatingButton()]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingHorizontal: 16,\n    paddingVertical: 24\n  },\n  genreCard: {\n    backgroundColor: '#e5e5e5',\n    paddingVertical: 16,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    marginBottom: 16\n  },\n  selectedGenreCard: {\n    backgroundColor: '#1db954'\n  },\n  genreText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#000'\n  },\n  selectedGenreText: {\n    color: '#fff'\n  },\n  button: {\n    position: 'absolute',\n    right: 16,\n    backgroundColor: '#1db954',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    elevation: 4\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default PreferenciasScreen;","map":{"version":3,"names":["React","useEffect","useState","StyleSheet","View","Text","Image","TouchableOpacity","Alert","AsyncStorage","getGeneros","jsx","_jsx","jsxs","_jsxs","PreferenciasScreen","_useState","genres","_useState2","_slicedToArray","fetchResult","setFetchResult","_useState3","_useState4","selectedGenres","setSelectedGenres","_useState5","_useState6","scrollOffset","setScrollOffset","fetchPreferences","_fetchPreferences","apply","arguments","_asyncToGenerator","_yield$getGeneros","data","console","log","error","handleGenreSelect","genre","includes","filter","selectedGenre","length","concat","_toConsumableArray","handleSavePreferences","_handleSavePreferences","alert","setItem","JSON","stringify","handleScroll","event","offsetY","nativeEvent","contentOffset","y","renderFloatingButton","style","styles","button","top","onPress","children","buttonText","container","map","genreCard","selectedGenreCard","activeOpacity","genreText","selectedGenreText","create","flex","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","marginBottom","fontSize","fontWeight","color","position","right","elevation"],"sources":["C:/Users/T-GAMER/Desktop/11-async-storage/src/screens/PreferenciasScreen/PreferenciasScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StyleSheet, View, Text, Image, TouchableOpacity, Alert } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getGeneros } from '../../component/api/spotifyApi';\r\n\r\nconst PreferenciasScreen = () => {\r\n  const [fetchResult, setFetchResult] = useState({ genres: [] });\r\n  const [selectedGenres, setSelectedGenres] = useState([]);\r\n  const [scrollOffset, setScrollOffset] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetchPreferences();\r\n  }, []);\r\n\r\n  async function fetchPreferences() {\r\n    try {\r\n      const { data: { genres } } = await getGeneros();\r\n      setFetchResult({ genres });\r\n      console.log(genres);\r\n    } catch (error) {\r\n      setFetchResult({ genres: [] });\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  function handleGenreSelect(genre) {\r\n    if (selectedGenres.includes(genre)) {\r\n      setSelectedGenres(selectedGenres.filter((selectedGenre) => selectedGenre !== genre));\r\n    } else if (selectedGenres.length < 5) {\r\n      setSelectedGenres([...selectedGenres, genre]);\r\n    }\r\n  }\r\n\r\n  async function handleSavePreferences() {\r\n    if (selectedGenres.length === 0) {\r\n      Alert.alert('Erro', 'Selecione pelo menos um gênero.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await AsyncStorage.setItem('selectedGenres', JSON.stringify(selectedGenres));\r\n      Alert.alert('Sucesso', 'Preferências salvas com sucesso!');\r\n    } catch (error) {\r\n      console.error(error);\r\n      Alert.alert('Erro', 'Ocorreu um erro ao salvar as preferências.');\r\n    }\r\n  }\r\n\r\n  const handleScroll = event => {\r\n    const offsetY = event.nativeEvent.contentOffset.y;\r\n    setScrollOffset(offsetY);\r\n  }\r\n\r\n  const renderFloatingButton = () => {\r\n    if (selectedGenres.length === 0) {\r\n      return null;\r\n    }\r\n    return (\r\n      <TouchableOpacity style={[styles.button, { top: scrollOffset + 500 }]} onPress={handleSavePreferences}>\r\n        <Text style={styles.buttonText}>Pronto</Text>\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {fetchResult.genres.map((genre) => (\r\n        <TouchableOpacity\r\n          key={genre}\r\n          style={[styles.genreCard, selectedGenres.includes(genre) && styles.selectedGenreCard]}\r\n          onPress={() => handleGenreSelect(genre)}\r\n          activeOpacity={0.7}\r\n        >\r\n          <Text style={[styles.genreText, selectedGenres.includes(genre) && styles.selectedGenreText]}>{genre}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n      {renderFloatingButton()}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 24,\r\n    },\r\n    genreCard: {\r\n    backgroundColor: '#e5e5e5',\r\n    paddingVertical: 16,\r\n    paddingHorizontal: 24,\r\n    borderRadius: 8,\r\n    marginBottom: 16,\r\n    },\r\n    selectedGenreCard: {\r\n    backgroundColor: '#1db954',\r\n    },\r\n    genreText: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    color: '#000',\r\n    },\r\n    selectedGenreText: {\r\n    color: '#fff',\r\n    },\r\n    button: {\r\n    position: 'absolute',\r\n    right: 16,\r\n    backgroundColor: '#1db954',\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n    borderRadius: 20,\r\n    elevation: 4,\r\n    },\r\n    buttonText: {\r\n    color: '#fff',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    },\r\n    });\r\n\r\nexport default PreferenciasScreen;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAEnD,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,UAAU;AAAyC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE5D,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;EAC/B,IAAAC,SAAA,GAAsCd,QAAQ,CAAC;MAAEe,MAAM,EAAE;IAAG,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAAvDI,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAAI,UAAA,GAA4CpB,QAAQ,CAAC,EAAE,CAAC;IAAAqB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EACxC,IAAAG,UAAA,GAAwCxB,QAAQ,CAAC,CAAC,CAAC;IAAAyB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA5CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EAEpC1B,SAAS,CAAC,YAAM;IACd6B,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAAC,SAEQA,gBAAgBA,CAAA;IAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,kBAAA;IAAAA,iBAAA,GAAAG,iBAAA,CAA/B,aAAkC;MAChC,IAAI;QACF,IAAAC,iBAAA,SAAmCzB,UAAU,CAAC,CAAC;UAA/BO,MAAM,GAAAkB,iBAAA,CAAdC,IAAI,CAAInB,MAAM;QACtBI,cAAc,CAAC;UAAEJ,MAAM,EAANA;QAAO,CAAC,CAAC;QAC1BoB,OAAO,CAACC,GAAG,CAACrB,MAAM,CAAC;MACrB,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdlB,cAAc,CAAC;UAAEJ,MAAM,EAAE;QAAG,CAAC,CAAC;QAC9BoB,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAAA,OAAAR,iBAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,SAASO,iBAAiBA,CAACC,KAAK,EAAE;IAChC,IAAIjB,cAAc,CAACkB,QAAQ,CAACD,KAAK,CAAC,EAAE;MAClChB,iBAAiB,CAACD,cAAc,CAACmB,MAAM,CAAC,UAACC,aAAa;QAAA,OAAKA,aAAa,KAAKH,KAAK;MAAA,EAAC,CAAC;IACtF,CAAC,MAAM,IAAIjB,cAAc,CAACqB,MAAM,GAAG,CAAC,EAAE;MACpCpB,iBAAiB,IAAAqB,MAAA,CAAAC,kBAAA,CAAKvB,cAAc,IAAEiB,KAAK,EAAC,CAAC;IAC/C;EACF;EAAC,SAEcO,qBAAqBA,CAAA;IAAA,OAAAC,sBAAA,CAAAjB,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAgB,uBAAA;IAAAA,sBAAA,GAAAf,iBAAA,CAApC,aAAuC;MACrC,IAAIV,cAAc,CAACqB,MAAM,KAAK,CAAC,EAAE;QAC/BrC,KAAK,CAAC0C,KAAK,CAAC,MAAM,EAAE,iCAAiC,CAAC;QACtD;MACF;MAEA,IAAI;QACF,MAAMzC,YAAY,CAAC0C,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAAC7B,cAAc,CAAC,CAAC;QAC5EhB,KAAK,CAAC0C,KAAK,CAAC,SAAS,EAAE,kCAAkC,CAAC;MAC5D,CAAC,CAAC,OAAOX,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;QACpB/B,KAAK,CAAC0C,KAAK,CAAC,MAAM,EAAE,4CAA4C,CAAC;MACnE;IACF,CAAC;IAAA,OAAAD,sBAAA,CAAAjB,KAAA,OAAAC,SAAA;EAAA;EAED,IAAMqB,YAAY,GAAG,SAAfA,YAAYA,CAAGC,KAAK,EAAI;IAC5B,IAAMC,OAAO,GAAGD,KAAK,CAACE,WAAW,CAACC,aAAa,CAACC,CAAC;IACjD9B,eAAe,CAAC2B,OAAO,CAAC;EAC1B,CAAC;EAED,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAA,EAAS;IACjC,IAAIpC,cAAc,CAACqB,MAAM,KAAK,CAAC,EAAE;MAC/B,OAAO,IAAI;IACb;IACA,OACEjC,IAAA,CAACL,gBAAgB;MAACsD,KAAK,EAAE,CAACC,MAAM,CAACC,MAAM,EAAE;QAAEC,GAAG,EAAEpC,YAAY,GAAG;MAAI,CAAC,CAAE;MAACqC,OAAO,EAAEjB,qBAAsB;MAAAkB,QAAA,EACpGtD,IAAA,CAACP,IAAI;QAACwD,KAAK,EAAEC,MAAM,CAACK,UAAW;QAAAD,QAAA,EAAC;MAAM,CAAM;IAAC,CAC7B,CAAC;EAEvB,CAAC;EAED,OACEpD,KAAA,CAACV,IAAI;IAACyD,KAAK,EAAEC,MAAM,CAACM,SAAU;IAAAF,QAAA,GAC3B9C,WAAW,CAACH,MAAM,CAACoD,GAAG,CAAC,UAAC5B,KAAK;MAAA,OAC5B7B,IAAA,CAACL,gBAAgB;QAEfsD,KAAK,EAAE,CAACC,MAAM,CAACQ,SAAS,EAAE9C,cAAc,CAACkB,QAAQ,CAACD,KAAK,CAAC,IAAIqB,MAAM,CAACS,iBAAiB,CAAE;QACtFN,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMzB,iBAAiB,CAACC,KAAK,CAAC;QAAA,CAAC;QACxC+B,aAAa,EAAE,GAAI;QAAAN,QAAA,EAEnBtD,IAAA,CAACP,IAAI;UAACwD,KAAK,EAAE,CAACC,MAAM,CAACW,SAAS,EAAEjD,cAAc,CAACkB,QAAQ,CAACD,KAAK,CAAC,IAAIqB,MAAM,CAACY,iBAAiB,CAAE;UAAAR,QAAA,EAAEzB;QAAK,CAAO;MAAC,GALtGA,KAMW,CAAC;IAAA,CACpB,CAAC,EACDmB,oBAAoB,CAAC,CAAC;EAAA,CACnB,CAAC;AAEX,CAAC;AAED,IAAME,MAAM,GAAG3D,UAAU,CAACwE,MAAM,CAAC;EAC7BP,SAAS,EAAE;IACXQ,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,iBAAiB,EAAE,EAAE;IACrBC,eAAe,EAAE;EACjB,CAAC;EACDT,SAAS,EAAE;IACXO,eAAe,EAAE,SAAS;IAC1BE,eAAe,EAAE,EAAE;IACnBD,iBAAiB,EAAE,EAAE;IACrBE,YAAY,EAAE,CAAC;IACfC,YAAY,EAAE;EACd,CAAC;EACDV,iBAAiB,EAAE;IACnBM,eAAe,EAAE;EACjB,CAAC;EACDJ,SAAS,EAAE;IACXS,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,KAAK,EAAE;EACP,CAAC;EACDV,iBAAiB,EAAE;IACnBU,KAAK,EAAE;EACP,CAAC;EACDrB,MAAM,EAAE;IACRsB,QAAQ,EAAE,UAAU;IACpBC,KAAK,EAAE,EAAE;IACTT,eAAe,EAAE,SAAS;IAC1BC,iBAAiB,EAAE,EAAE;IACrBC,eAAe,EAAE,CAAC;IAClBC,YAAY,EAAE,EAAE;IAChBO,SAAS,EAAE;EACX,CAAC;EACDpB,UAAU,EAAE;IACZiB,KAAK,EAAE,MAAM;IACbF,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACZ;AACA,CAAC,CAAC;AAEN,eAAepE,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}