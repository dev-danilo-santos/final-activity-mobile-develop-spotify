{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getGeneros } from \"../../component/api/spotifyApi\";\nimport ThemeToogler from \"../../component/themeToogler/themeToogler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PreferenciasScreen = function PreferenciasScreen() {\n  var _useState = useState({\n      genres: []\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    fetchResult = _useState2[0],\n    setFetchResult = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedGenres = _useState4[0],\n    setSelectedGenres = _useState4[1];\n  var buttonRef = useRef(null);\n  useEffect(function () {\n    fetchPreferences();\n  }, []);\n  function fetchPreferences() {\n    return _fetchPreferences.apply(this, arguments);\n  }\n  function _fetchPreferences() {\n    _fetchPreferences = _asyncToGenerator(function* () {\n      try {\n        var _yield$getGeneros = yield getGeneros(),\n          genres = _yield$getGeneros.data.genres;\n        setFetchResult({\n          genres: genres\n        });\n        console.log(genres);\n      } catch (error) {\n        setFetchResult({\n          genres: []\n        });\n        console.error(error);\n      }\n    });\n    return _fetchPreferences.apply(this, arguments);\n  }\n  function handleGenreSelect(genre) {\n    if (selectedGenres.includes(genre)) {\n      setSelectedGenres(selectedGenres.filter(function (selectedGenre) {\n        return selectedGenre !== genre;\n      }));\n    } else if (selectedGenres.length < 5) {\n      setSelectedGenres([].concat(_toConsumableArray(selectedGenres), [genre]));\n    }\n  }\n  function handleSavePreferences() {\n    return _handleSavePreferences.apply(this, arguments);\n  }\n  function _handleSavePreferences() {\n    _handleSavePreferences = _asyncToGenerator(function* () {\n      if (selectedGenres.length === 0) {\n        Alert.alert('Erro', 'Selecione pelo menos um gênero.');\n        return;\n      }\n      try {\n        yield AsyncStorage.setItem('selectedGenres', JSON.stringify(selectedGenres));\n        Alert.alert('Sucesso', 'Preferências salvas com sucesso!');\n      } catch (error) {\n        console.error(error);\n        Alert.alert('Erro', 'Ocorreu um erro ao salvar as preferências.');\n      }\n    });\n    return _handleSavePreferences.apply(this, arguments);\n  }\n  function handleScroll(event) {\n    var buttonHeight = buttonRef.current.offsetHeight;\n    var buttonWidth = buttonRef.current.offsetWidth;\n    var windowSize = event.nativeEvent.layoutMeasurement.height;\n    var contentHeight = event.nativeEvent.contentSize.height;\n    var currentPosition = event.nativeEvent.contentOffset.y;\n    if (currentPosition + windowSize >= contentHeight - buttonHeight) {\n      buttonRef.current.setNativeProps({\n        style: {\n          position: 'absolute',\n          bottom: 32,\n          right: 32\n        }\n      });\n    } else {\n      buttonRef.current.setNativeProps({\n        style: {\n          position: 'relative'\n        }\n      });\n    }\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsx(ThemeToogler, {}), _jsx(TouchableOpacity, {\n        style: styles.button,\n        onPress: handleSavePreferences,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Pronto\"\n        })\n      })]\n    }), _jsx(ScrollView, {\n      contentContainerStyle: styles.scrollContainer,\n      onScroll: handleScroll,\n      children: fetchResult.genres.map(function (genre) {\n        return _jsx(TouchableOpacity, {\n          style: [styles.genreCard, selectedGenres.includes(genre) && styles.selectedGenreCard],\n          onPress: function onPress() {\n            return handleGenreSelect(genre);\n          },\n          activeOpacity: 0.7,\n          children: _jsx(Text, {\n            style: [styles.genreText, selectedGenres.includes(genre) && styles.selectedGenreText],\n            children: genre\n          })\n        }, genre);\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: '#ddd'\n  },\n  button: {\n    backgroundColor: '#1db954',\n    borderRadius: 4,\n    paddingHorizontal: 12,\n    paddingVertical: 8\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16\n  },\n  scrollContainer: {\n    padding: 16,\n    paddingBottom: 72\n  },\n  genreCard: {\n    width: '50%',\n    height: 80,\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    marginBottom: 16,\n    marginRight: 8\n  },\n  selectedGenreCard: {\n    backgroundColor: '#1db954'\n  },\n  genreText: {\n    color: '#333',\n    fontSize: 16\n  },\n  selectedGenreText: {\n    color: '#fff',\n    fontWeight: 'bold'\n  }\n});\nexport default PreferenciasScreen;","map":{"version":3,"names":["React","useEffect","useState","useRef","StyleSheet","View","Text","Image","TouchableOpacity","Alert","ScrollView","AsyncStorage","getGeneros","ThemeToogler","jsx","_jsx","jsxs","_jsxs","PreferenciasScreen","_useState","genres","_useState2","_slicedToArray","fetchResult","setFetchResult","_useState3","_useState4","selectedGenres","setSelectedGenres","buttonRef","fetchPreferences","_fetchPreferences","apply","arguments","_asyncToGenerator","_yield$getGeneros","data","console","log","error","handleGenreSelect","genre","includes","filter","selectedGenre","length","concat","_toConsumableArray","handleSavePreferences","_handleSavePreferences","alert","setItem","JSON","stringify","handleScroll","event","buttonHeight","current","offsetHeight","buttonWidth","offsetWidth","windowSize","nativeEvent","layoutMeasurement","height","contentHeight","contentSize","currentPosition","contentOffset","y","setNativeProps","style","position","bottom","right","styles","container","children","header","button","onPress","buttonText","contentContainerStyle","scrollContainer","onScroll","map","genreCard","selectedGenreCard","activeOpacity","genreText","selectedGenreText","create","flex","backgroundColor","flexDirection","justifyContent","alignItems","paddingHorizontal","paddingVertical","borderBottomWidth","borderBottomColor","borderRadius","color","fontWeight","fontSize","padding","paddingBottom","width","marginBottom","marginRight"],"sources":["C:/Users/T-GAMER/Desktop/11-async-storage/src/screens/PreferenciasScreen/PreferenciasScreen.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { StyleSheet, View, Text, Image, TouchableOpacity, Alert, ScrollView } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getGeneros } from '../../component/api/spotifyApi';\r\nimport ThemeToogler from '../../component/themeToogler/themeToogler';\r\n\r\nconst PreferenciasScreen = () => {\r\n  const [fetchResult, setFetchResult] = useState({ genres: [] });\r\n  const [selectedGenres, setSelectedGenres] = useState([]);\r\n  const buttonRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    fetchPreferences();\r\n  }, []);\r\n\r\n  async function fetchPreferences() {\r\n    try {\r\n      const { data: { genres } } = await getGeneros();\r\n      setFetchResult({ genres });\r\n      console.log(genres);\r\n    } catch (error) {\r\n      setFetchResult({ genres: [] });\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  function handleGenreSelect(genre) {\r\n    if (selectedGenres.includes(genre)) {\r\n      setSelectedGenres(selectedGenres.filter((selectedGenre) => selectedGenre !== genre));\r\n    } else if (selectedGenres.length < 5) {\r\n      setSelectedGenres([...selectedGenres, genre]);\r\n    }\r\n  }\r\n\r\n  async function handleSavePreferences() {\r\n    if (selectedGenres.length === 0) {\r\n      Alert.alert('Erro', 'Selecione pelo menos um gênero.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await AsyncStorage.setItem('selectedGenres', JSON.stringify(selectedGenres));\r\n      Alert.alert('Sucesso', 'Preferências salvas com sucesso!');\r\n    } catch (error) {\r\n      console.error(error);\r\n      Alert.alert('Erro', 'Ocorreu um erro ao salvar as preferências.');\r\n    }\r\n  }\r\n\r\n  function handleScroll(event) {\r\n    const buttonHeight = buttonRef.current.offsetHeight;\r\n    const buttonWidth = buttonRef.current.offsetWidth;\r\n    const windowSize = event.nativeEvent.layoutMeasurement.height;\r\n    const contentHeight = event.nativeEvent.contentSize.height;\r\n    const currentPosition = event.nativeEvent.contentOffset.y;\r\n\r\n    if (currentPosition + windowSize >= contentHeight - buttonHeight) {\r\n      buttonRef.current.setNativeProps({\r\n        style: {\r\n          position: 'absolute',\r\n          bottom: 32,\r\n          right: 32,\r\n        }\r\n      });\r\n    } else {\r\n      buttonRef.current.setNativeProps({\r\n        style: {\r\n          position: 'relative',\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <ThemeToogler />\r\n        <TouchableOpacity style={styles.button} onPress={handleSavePreferences}>\r\n          <Text style={styles.buttonText}>Pronto</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <ScrollView contentContainerStyle={styles.scrollContainer} onScroll={handleScroll}>\r\n        {fetchResult.genres.map((genre) => (\r\n          <TouchableOpacity\r\n            key={genre}\r\n            style={[styles.genreCard, selectedGenres.includes(genre) && styles.selectedGenreCard]}\r\n            onPress={() => handleGenreSelect(genre)}\r\n            activeOpacity={0.7}\r\n          >\r\n            <Text style={[styles.genreText, selectedGenres.includes(genre) && styles.selectedGenreText]}>{genre}</Text>\r\n          </TouchableOpacity>\r\n        ))}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    },\r\n    header: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#ddd',\r\n    },\r\n    button: {\r\n    backgroundColor: '#1db954',\r\n    borderRadius: 4,\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 8,\r\n    },\r\n    buttonText: {\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n    },\r\n    scrollContainer: {\r\n    padding: 16,\r\n    paddingBottom: 72,\r\n    },\r\n    genreCard: {\r\n        width: '50%',\r\n        height: 80,\r\n        backgroundColor: '#fff',\r\n        borderRadius: 8,\r\n        paddingHorizontal: 16,\r\n        paddingVertical: 12,\r\n        marginBottom: 16,\r\n        marginRight: 8, // adiciona um espaçamento entre as colunas\r\n      },\r\n    selectedGenreCard: {\r\n    backgroundColor: '#1db954',\r\n    },\r\n    genreText: {\r\n    color: '#333',\r\n    fontSize: 16,\r\n    },\r\n    selectedGenreText: {\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    },\r\n    });\r\n\r\nexport default PreferenciasScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}